package vereshchakov.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jdatepicker.JDatePicker;
import vereshchakov.bl.IncomeCalculator;
import vereshchakov.gui.component.NumericField;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.time.ZoneId;
import java.util.Calendar;

/**
 * Created by Danila Vereshchakov on 24.03.18.
 */
public class ForexIncomeCalc extends JFrame {
    private JPanel mainPanel;
    private JButton calculateButton;
    private JLabel amountUsdLabel;
    private JLabel dateLabel;
    private JDatePicker dateInput;
    private NumericField amountInput;
    private JLabel profitLabel;

    private IncomeCalculator calculator;

    public ForexIncomeCalc(IncomeCalculator calculator) {
        this.calculator = calculator;

        calculateButton.setEnabled(false);
        dateInput.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (validateDateInput((Calendar) dateInput.getFormattedTextField().getValue())) {
                    calculateButton.setEnabled(true);
                } else {
                    calculateButton.setEnabled(false);
                }
            }
        });

        calculateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String usdAmount = (amountInput.getText().isEmpty()) ? "0" : amountInput.getText();
                Calendar dateCal = (Calendar) dateInput.getFormattedTextField().getValue();

                BigDecimal profit = calculator.incomeCalc(dateCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), new BigDecimal(usdAmount));
                if (profit.compareTo(new BigDecimal(0)) < 0) {
                    profitLabel.setForeground(Color.RED);
                } else {
                    profitLabel.setForeground(Color.GREEN);
                }
                profitLabel.setText(profit.toString());
            }
        });
    }

    // Проверяем, что выбрана дата и дата не в будущем
    private boolean validateDateInput(Calendar inputDate) {
        if (dateInput.getFormattedTextField().getValue() == null) {
            return false;
        }

        Calendar now = Calendar.getInstance();

        return inputDate.compareTo(now) <= 0;
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 3, new Insets(10, 10, 10, 10), -1, -1, false, true));
        amountUsdLabel = new JLabel();
        amountUsdLabel.setHorizontalAlignment(0);
        amountUsdLabel.setHorizontalTextPosition(0);
        amountUsdLabel.setText("Amount USD");
        mainPanel.add(amountUsdLabel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dateLabel = new JLabel();
        dateLabel.setHorizontalTextPosition(0);
        dateLabel.setText("Date");
        mainPanel.add(dateLabel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dateInput = new JDatePicker();
        mainPanel.add(dateInput, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        amountInput = new NumericField();
        mainPanel.add(amountInput, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(200, 10), null, null, 0, false));
        calculateButton = new JButton();
        calculateButton.setText("Recalculate");
        mainPanel.add(calculateButton, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(10, -1), null, 0, false));
        profitLabel = new JLabel();
        profitLabel.setText("");
        mainPanel.add(profitLabel, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
